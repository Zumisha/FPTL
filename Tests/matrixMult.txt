Data List['t]
{
	List = c_nil ++ 't * List['t].c_cons;
}

Scheme MatrixMult
{
	GraphSize = 50;
	Lst = (GraphSize * GraphSize).RandomMatrix(10, 0);
	Lst1 = (GraphSize * GraphSize).RandomMatrix(10, 0);
	@=(Lst * GraphSize *GraphSize * Lst1 * GraphSize * GraphSize * 0 * 0).matrixMult;
	//@ = ([1].readMatrix * [2].readMatrix * 0 * 0).matrixMult.print;
	

    Fun RandomMatrix[Max, Min]
	{
		Fun RandomList[Max, Min]
		{
			@ = (id * 0).equal -> c_nil,
						((Min * (rand * (Max * Min).sub).mul).add * (id * 1).sub.RandomList).c_cons; 
		}
		
		TmpMax = Max;
		TmpMin = Min;
		@ = ([1] * 0).equal -> c_nil,
                    ([2].RandomList(TmpMax, TmpMin)* (([1] * 1).sub * [2]).RandomMatrix).c_cons; 
	}

	/// matrixMult: возвращает результат умножения двух матриц
	// [1]: матрица
	// [2]: количество строчек матрицы [1]
	// [3]: количество столбцов матрицы [1]
	// [4]: матрица
	// [5]: количество строчек матрицы [2]
	// [6]: количество столбцов матрицы [2]
	// [7]: номер текущей строки
	// [8]: номер текущего столбца
	// -> [1]: выходная матрица
	matrixMult = ([7] * [2]).equal -> c_nil,
					(rowMult * ([1] *[2] *[3] *[4] *[5]* [6] * ([7] * 1).add * 0).matrixMult).c_cons;
	
	/// rowMult: возвращает строку (список) результирующей матрицы
	// [1]..[8]: 
	// -> [1]: строка результирующей матрицы
	rowMult = 	([8] * [6]).equal -> c_nil,
					((id * 0).elemSum * ([1] *[2] *[3] *[4] *[5]* [6] * [7] * ([8] * 1).add).rowMult.[1]).c_cons;
					
	// elemSum: возвращает элемент результирующей матрицы
	// [1]..[8]: 
	// [9]: номер текущего столбца
	// -> [1]: элемент матрицы
	elemSum = ([9] * [3]).equal -> 0,
				((([1] * [7] * [9]).nnth * ([4] * [9] * [8]).nnth).mul * ([1] * [2] * [3] *[4] *[5] *[6] *[7] *[8] * ([9] * 1).add).elemSum).add;
				
	/// readMatrix - читает матрицу из файла
	// [1]: файловая строка
	// -> [1]: список строчек матрицы (строчка - список элементов строки)	
	// -> [2]: количество строчек матрицы
	// -> [3]: количество столбцов матрицы
	readMatrix = ([1].readFile.readSize).(readElements * [2] * [3]);
	
	/// readSize - читает размер матрицы в файле
	// [1]: файловая строка 
	// -> [1]: файловая строчка с элементами матрицы
	// -> [2]: количество строчек
	// -> [3]: количество столбцов
	readSize = ([1] *"[\\d]+").getToken.(([2] *"[\\d]+").getToken.([2] * [1].toInt) * [1].toInt).([1] * [3] * [2]);
	
	/// readNumber - читает число в файле
	// [1]: файловая строка 
	// -> [1]: остаток файловой строки
	// -> [2]: прочитанное число
	readNumber = ([1] *"[\\d]+").getToken.([2] * [1].toInt);
	
	/// readElements - читает элементы матрицы в файле
	// [1]: файловая строка 
	// [2]: количество строк
	// [3]: количество столбцов
	// -> [1]: список строчек (строчка - список элементов строки)
	readElements = ([1] * "").equal -> c_nil ,
						(([1] * [2] * [3] * 0).readLine * [2] * [3]).([1] * ([2] * [3] * [4]).readElements).c_cons;
	
	/// readLine - читает элементы строки матрицы в файле
	// [1]: файловая строка 
	// [2]: количество строк
	// [3]: количество столбцов
	// [4]: номер текущего элемента
	// -> [1]: список прочитанной строки
	// -> [2]: остаток файловой строки
	readLine = 	([3] * [4]).equal -> c_nil * [1],
					(([1].readNumber * id).([2] * ([1] * [4] * [5] * ([6] * 1).add).readLine)).(([1] * [2]).c_cons * [3]);
				
	/// orderList: создает список вида (1,2,3, ... , N)
	// [1]: число элементов в списке
	// -> [1]: список с упорядоченными значениями
	orderList = ([1] * 0).orderList1;
	orderList1 = ([1] * [2]).equal -> c_nil,
					([1] * ([2] * 1).add).([2] * orderList1).c_cons;
		
	/// in,notIn: проверяет, есть ли элемент в списке
	// [1]: список
	// [2]: элемент
	// -> [1]: true или false
	in = ~c_nil -> false,
			([1].~c_cons.[1] * [2]).equal -> true,
				([1].~c_cons.[2] * [2]).in;
	notIn = in -> false, true;
	
	/// nth: возвращает n-ый элемент списка
	// [1]: список
	// [2]: номер
	// -> [1] : элемент списка
	nth = ([1]*[2] * 0).nth1;
	nth1 = ([2] * [3]).equal -> [1].~c_cons.[1],
				([1].~c_cons.[2] * [2] * ([3]*1).add).nth1;
	
	
	// nnth: возвращает элемент в списке списков (типа S[i,j])
	// [1]: список
	// [2]: номер внутреннего списка
	// [3]: номер элемента внутреннего списка
	// -> [1] : элемент списка
	nnth = (([1] * [2]).nth * [3]).nth; 

	/// delete : возвращает n:ый элемент списка
	// [1]: список
	// [2]: элемент
	// -> [1] : cписок
	delete = ~c_nil -> c_nil,
				([1].~c_cons.[1] * [2]).equal -> [1].~c_cons.[2],
				([1].~c_cons.[1] * ([1].~c_cons.[2] * [2]).delete).c_cons;

	
}

Application
% MatrixMult("MatrixA50.txt","MatrixB50.txt")